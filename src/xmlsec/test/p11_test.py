
__author__ = 'leifj'

import logging,traceback,os,subprocess,unittest
from tempfile import mkstemp
from StringIO import StringIO

P11_MODULE = '/usr/lib/libsofthsm.so'
P11_ENGINE = '/usr/lib/engines/engine_pkcs11.so'
P11_SPY = '/usr/lib/pkcs11/pkcs11-spy.so'

global p11_test_token_configured
p11_test_token_configured = False

def is_configured(v=None):
    global p11_test_token_configured
    if v is not None:
          p11_test_token_configured = v
    return p11_test_token_configured

try:
    import xmlsec.pk11 as pk11
except Exception:
    pass # catch you later

class P11Tests(unittest.TestCase):
    """
    Testing the PKCS#11 shim layer
    """
    p11_test_files = []
    softhsm_conf = None

    def _tf(self):
        f,fn = mkstemp()
        self.p11_test_files.append(fn)
        return fn

    def _p(self,args,env):
        proc = subprocess.Popen(args,stdout=subprocess.PIPE,stderr=subprocess.PIPE,env=env)
        out,err = proc.communicate()
        if err is not None and len(err) > 0:
            logging.error(err)
        if out is not None and len(out) > 0:
            logging.debug(out)
        rv = proc.wait()
        if rv:
            raise RuntimeError("command exited with code != 0: %d" % rv)

    def setup(self):
        return self.setUp()

    def setUp(self):
        logging.debug("Creating test pkcs11 token using softhsm")
        if not is_configured():
            try:
                import xmlsec.pk11 as pk11

                self.softhsm_db = self._tf()
                self.softhsm_conf = self._tf()
                logging.debug("Generating softhsm.conf")
                with open(self.softhsm_conf,"w") as f:
                    f.write("#Generated by pyXMLSecurity test\n0:%s\n" % self.softhsm_db)
                env = {'SOFTHSM_CONF': self.softhsm_conf}
                os.environ['SOFTHSM_CONF'] = self.softhsm_conf
                os.environ['PKCS11SPY'] = P11_MODULE # if we want to trace - requires changing the library below
                logging.debug("Initializing the token")
                self._p(['softhsm',
                    '--slot','0',
                    '--label','test',
                    '--init-token',
                    '--pin','secret1',
                    '--so-pin','secret2'],env)
                logging.debug("Generating 1024 bit RSA key in token")
                self._p(['pkcs11-tool',
                    '--module', P11_MODULE,
                    '-l',
                    '-k',
                    '--key-type','rsa:1024',
                    '--slot','0',
                    '--id','a1b2',
                    '--label','test',
                    '--pin','secret1'],env)
                self.signer_cert_pem = self._tf()
                self.openssl_conf = self._tf()
                logging.debug("Generating OpenSSL config")
                with open(self.openssl_conf,"w") as f:
                    f.write("""
openssl_conf = openssl_def

[openssl_def]
engines = engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
engine_id = pkcs11
dynamic_path = %s
MODULE_PATH = %s
PIN = secret1
init = 0

[req]
distinguished_name = req_distinguished_name

[req_distinguished_name]
                    """ % (P11_ENGINE,P11_MODULE))

                self.signer_cert_der = self._tf()

                logging.debug("Generating self-signed certificate")
                self._p(['openssl','req',
                    '-new',
                    '-x509',
                    '-subj',"/cn=Test Signer",
                    '-engine','pkcs11',
                    '-config', self.openssl_conf,
                    '-keyform','engine',
                    '-key','a1b2',
                    '-passin','pass:secret1',
                    '-out',self.signer_cert_pem],env)

                self._p(['openssl','x509',
                    '-inform','PEM',
                    '-outform','DER',
                    '-in',self.signer_cert_pem,
                    '-out',self.signer_cert_der
                    ],env)

                logging.debug("Importing certificate into token")
                self._p(['pkcs11-tool',
                    '--module',P11_MODULE,
                    '-l',
                    '--slot','0',
                    '--id','a1b2',
                    '--label','test',
                    '-y','cert',
                    '-w',self.signer_cert_der,
                    '--pin','secret1'],env)

                is_configured(True)

            except ImportError,ex:
                if logging.getLogger().isEnabledFor(logging.DEBUG):
                    print "-" * 64
                    traceback.print_exc()
                    print "-" * 64
                logging.warning("PKCS11 tests disabled: unable to import xmlsec.pk11: %s" % ex)
            except Exception,ex:
                if logging.getLogger().isEnabledFor(logging.DEBUG):
                    print "-" * 64
                    traceback.print_exc()
                    print "-" * 64
                logging.warning("PKCS11 tests disabled: unable to initialize test token: %s" % ex)

    def teardown(self):
        return self.tearDown()

    def tearDown(self):
        for o in self.p11_test_files:
            if os.path.exists(o):
                os.unlink(o)

    def test_is_configured(self):
        if is_configured():
           self.assertTrue(is_configured)

    @unittest.expectedFailure
    def test_open_session(self):
        if is_configured():
            session = None
            try:
                print os.environ['SOFTHSM_CONF']
                session = pk11._session(P11_MODULE,0,"secret1")
                self.assertTrue(session is not None)
            except Exception,ex:
                traceback.print_exc()
                raise ex
            finally:
                if session is not None:
                    pass
                    #pk11._close_session(session)
        else:
            unittest.skip("PKCS11 unconfigured")

    @unittest.expectedFailure
    def test_open_session_no_pin(self):
        if is_configured():
            session = None
            try:
                print os.environ['SOFTHSM_CONF']
                session = pk11._session(P11_MODULE,0)
                self.assertTrue(session is not None)
            except Exception,ex:
                traceback.print_exc()
                raise ex
            finally:
                if session is not None:
                    pass
                    #pk11._close_session(session)
        else:
            unittest.skip("PKCS11 unconfigured")

    def test_find_key(self):
        if is_configured():
            session = None
            try:
                print os.environ['SOFTHSM_CONF']
                session = pk11._session(P11_MODULE,0,"secret1")
                key,cert = pk11._find_key(session,"test")
                self.assertTrue(key is not None)
                self.assertTrue(cert is not None)
                self.assertEquals(cert.strip(),open(self.signer_cert_pem).read().strip())
                pk11._close_session(session)
                session = None
                session = pk11._session(P11_MODULE,0,"secret1")
            except Exception,ex:
                raise ex
            finally:
                if session is not None:
                    pass
                    #pk11._close_session(session)
        else:
            unittest.skip("PKCS11 unconfigured")

def main():
    unittest.main()

if __name__ == '__main__':
    main()
